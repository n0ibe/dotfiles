set dircounts
set drawbox
set hidden
set ifs "\n"
set info "size"
set period 1
set previewer "~/.config/lf/previewer"
set shell "bash"
set timefmt "2006-Jan-02 at 15:04:05"

cmd open ${{
  text_files=()
  image_files=()
  for f in $fx; do
    case $(file -b --mime-type $f) in
      text/*|application/json|inode/x-empty) text_files+=("$f");;
      image/*) image_files+=("$f");;
      video/*) open -n "$f";;
      *) open "$f" &>/dev/null;;
    esac
  done
  [[ ${#image_files[@]} -eq 0 ]] || open "${image_files[@]}"
  [[ ${#text_files[@]} -eq 0 ]] || $EDITOR "${text_files[@]}"
}}

cmd preview_open ${{
  for f in $fx; do
    [[ $(head -c 4 $f) != "%PDF" ]] || open -a Preview "$f"
  done
}}

cmd newfile %{{
  touch "$@"
  lf -remote "send $id select \"$@\""
}}

cmd newdir %{{
  mkdir -p "$@"
  lf -remote "send $id select \"$@\""
}}

cmd move_to_newdir %{{
  mkdir -p "$@"
  mv $fx "$@"
  lf -remote "send $id select \"$@\""
}}

cmd make_executable %{{
  chmod +x $fx
  lf -remote "send $id reload"
}}

cmd remove_executable %{{
  chmod -x $fx
  lf -remote "send $id reload"
}}

cmd set_wallpaper ${{
  [[ $(file -b --mime-type "$f") == image/* ]] \
    && osascript -e \
        "tell application \"Finder\" to set desktop picture to POSIX file \
          \"$f\"" &>/dev/null \
    && lf -remote "send $id echo \"\033[32mWallpaper set correctly\033[0m\"" \
    || lf -remote "send $id echoerr 'Error: could not set wallpaper'"
  osascript -e "quit app \"Finder\"" &>/dev/null
}}

cmd eject_disk ${{
  clear
  space_left=$( \
    diskutil info "$f" 2>/dev/null \
    | sed -n "s/.*Volume Free Space:\s*//p" \
    | awk '{print $1, $2}'\
  )
  diskutil eject "$f" &>/dev/null \
    && lf -remote \
        "send $id echo \"\033[32m$(basename $f) has been properly \
ejected\033[0m\"" \
    && terminal-notifier \
        -title "Disk ejected" \
        -subtitle "$(basename $f) has been ejected" \
        -message "There are ${space_left} left on disk" \
        -appIcon "${HOME}/.config/lf/hard-disk-icon.png" \
    || lf -remote "send $id echoerr 'Error: could not eject disk'"
}}

cmd fuzzy_edit ${{
  clear
  filename="$(fzf --prompt="Edit> " --multi --height=8)" \
    && $EDITOR "${HOME}/${filename}" \
    || true
}}

cmd fuzzy_cd ${{
  clear
  dirname="$( \
    eval $(echo $FZF_ONLYDIR_COMMAND) \
    | fzf --prompt="Cd> " --height=8 \
  )" \
    && dirname="$(echo ${dirname} | sed 's/\ /\\\ /g')" \
    && lf -remote "send $id cd ~/${dirname}" \
    || true
}}

cmd mount_ocean %{{
  mnt_dir="${HOME}/ocean"
  mkdir "${mnt_dir}"
  sshfs ocean: "${mnt_dir}" -F "${HOME}/.ssh/config" \
    && lf -remote "send $id cd ${mnt_dir}" \
  lf -remote "send $id reload"
}}

cmd unmount_ocean %{{
  mnt_dir="${HOME}/ocean"
  lf -remote "send $id cd ${HOME}"
  umount -f "${mnt_dir}" && rm -rf "${mnt_dir}"
  lf -remote "send $id reload"
}}

map m
map u
map x cut
map d delete

cmap <up> cmd-history-prev
cmap <down> cmd-history-next

map <enter> push $
map t push :newfile<space>
map k push :newdir<space>
map D push :move_to_newdir<space>

map P preview_open
map + make_executable
map - remove_executable
map s set_wallpaper
map j eject_disk
map <c-x><c-e> fuzzy_edit
map <c-x><c-d> fuzzy_cd
map mo mount_ocean
map uo unmount_ocean

map gvl cd "/Volumes"
