# Initially taken from [1].

global !p
texMathZones = ["texMathZone" + x for x in ["A", "AS", "B", "BS", "C", "CS", \
                                            "D", "DS", "E", "ES", "F", "FS", \
                                            "G", "GS", "H", "HS", "I", "IS", \
                                            "J", "JS", "K", "KS", "L", "LS", \
                                            "DS", "V", "W", "X", "Y", "Z", \
                                            "AmsA", "AmsB", "AmsC", "AmsD", \
                                            "AmsE", "AmsF", "AmsG", "AmsAS", \
                                            "AmsBS", "AmsCS", "AmsDS", \
                                            "AmsES", "AmsFS", "AmsGS" ]]
texIgnoreMathZones = ["texMathText"]
texMathZoneIds = vim.eval("map(" + str(texMathZones) + ", ' hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval("map(" + str(texIgnoreMathZones) \
                                       + ", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
    synstackids = vim.eval("synstack(line('.'), \
                                     col('.') - (col('.') >= 2 ? 1 : 0))")
    try:
        first = next(i for i in reversed(synstackids) \
                        if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return first != ignore
    except StopIteration:
        return False
endglobal

# Environmemts

snippet mue "Make unnumbered equation" bA
\[
	$1
\]
$0
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $1
\end{itemize}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $1
\end{enumerate}
endsnippet

snippet thm "Theorem" b
\begin{theorem}$1
	$2
\end{theorem}
endsnippet

snippet lemma "Lemma" b
\begin{lemma}$1
	$2
\end{lemma}
endsnippet

snippet prop "Proposition" b
\begin{proposition}$1
	$2
\end{proposition}
endsnippet

snippet cor "Corollary" b
\begin{corollary}$1
	$2
\end{corollary}
endsnippet

snippet def "Definition" b
\begin{definition}[name={$1}]
	$2
\end{definition}
endsnippet

snippet rem "Remark" b
\begin{remark}
	$1
\end{remark}
endsnippet

snippet proof "Proof" b
\begin{proof}
	$1
\end{proof}
endsnippet

snippet env "Generic environment" b
\begin{$1}$2
	$3
\end{$1}
endsnippet

# Math

context "math()"
snippet uu "superscript" ieA
^{$1}
endsnippet

context "math()"
snippet dd "subscript" ieA
_{$1}
endsnippet

context "math()"
snippet .. "dots" ieA
\dots
endsnippet

context "math()"
snippet oo "infty" ieA
\infty
endsnippet

context "math()"
snippet hat "hat" ieA
\hat{$1}$0
endsnippet

context "math()"
snippet lrr "left right round" ieA
\left( $1 \right)
endsnippet

context "math()"
snippet lrs "left right square" ieA
\left[ $1 \right]
endsnippet

context "math()"
snippet lrc "left right curly" ieA
\left\\{ $1 \right\\}
endsnippet

context "math()"
snippet "([^\\a-zA-Z])fr" "frac" ireA
`!p snip.rv=match.group(1)`\\frac{$1}{$2}
endsnippet

context "math()"
snippet "([^\\])sum" "sum" ireA
`!p snip.rv=match.group(1)`\sum_{$1}^{$2}
endsnippet

context "math()"
snippet "([^\\])int" "int" ireA
`!p snip.rv=match.group(1)`\int_{$1}^{$2}
endsnippet

context "math()"
snippet "([A-Za-z])(\d)" "Auto subscript" ireA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "([A-Za-z])bar" "Postfix bar" ireA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])hat" "Postfix hat" ireA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])tilde" "Postfix tilde" ireA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

# Miscellaneous

snippet md "Make dollar" iA
$$1$$0
endsnippet

snippet mc "Make curly" iA
{$1}
endsnippet

snippet mwe "Minimal working example" b
\documentclass{article}
$1
\begin{document}
$0
\end{document}
endsnippet

# [1]: https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets
